use sphere_lib::Sphere;
use vector_lib::Vector3D;
use vector_lib::DataTypeTraits;

// TODO: Add other type of objects to this enum when made
enum ObjectType<T: DataTypeTraits> {
    Sphere{center: Vector3D<T>, radius: T}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////// STRUCT DEFINITION //////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

pub struct Scene<T: DataTypeTraits>
{
    objects: Vec<ObjectType<T>>
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// STRUCT IMPL DEFINITIONS ///////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

impl<T: DataTypeTraits> Scene<T> {
    fn is_empty(&self) -> bool {
        self.objects.is_empty()
    }
}